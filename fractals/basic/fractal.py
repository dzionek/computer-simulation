import numpy as np
import matplotlib.pyplot as plt

"""
Module contains a parent class with general things common to the Julia set and the Mandelbrot set.
Fractals are generated by finding the last number before the sequence z_{n+1} = z_{n} + C turned out
to be diverging, where C is a constant explored over the given interval of complex numbers and z_{0} = 0.
"""

class Fractal:
    """
    Class initializes fractals, checks if values from a complex plane make convergent sequences,
     and prints the fractal graph.
    Attributes:
        iteration_limit: int - number which says how many iterations we want to go through to check
            whether the sequence is diverging.
        accuracy: int - number of points between real and imaginary domain endpoints which we consider
            un our visualization.
        real_domain: [float[ - the domain of real numbers which we explore
        imaginary_domain: [float' - the domain of imaginary numbers which we explore (without imaginary units!)
    """
    def __init__(self, iteration_limit: int, accuracy: int, real_domain: [float], imaginary_domain: [float]) -> None:
        self.iteration_limit = iteration_limit
        self.accuracy = accuracy
        self.real_domain = real_domain
        self.imaginary_domain = imaginary_domain

    def last_convergent(self, *args, **kwargs):
        """
        The method returns the last number before a sequence turned out to be diverging.
        It differs between Mandelbrot and Julia sets, so is intentionally skipped in the parent class.
        """
        pass

    def last_convergent_array(self) -> [[int]]:
        """
        Generate a 2D array with the numbers of the last number
        before the sequence turned out to be diverging.
        """
        x_array = np.linspace(self.real_domain[0], self.real_domain[1], self.accuracy)
        y_array = np.linspace(self.imaginary_domain[0], self.imaginary_domain[1], self.accuracy)
        constants = np.zeros((self.accuracy, self.accuracy), dtype=complex)

        for x_index in range(len(x_array)):
            for y_index in range(len(y_array)):
                constants[x_index, y_index] = complex(x_array[x_index], y_array[y_index])

        last_convergent_array = [[self.last_convergent(element) for element in row] for row in constants]
        return last_convergent_array

    def plot(self) -> None:
        """Plot the graph of the fractal."""
        last_convergent_array = np.array(self.last_convergent_array())
        plt.xlabel("Real part")
        plt.ylabel("Imaginary part")
        plt.imshow(last_convergent_array.T, cmap='RdGy', interpolation='bilinear', extent=self.real_domain + self.imaginary_domain)